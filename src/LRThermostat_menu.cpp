/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "LRThermostat_menu.h"
#include "ThemeCoolBlueTraditional.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Thermostat Menu", "a4a49d27-69e5-459b-a2ea-e3e521bd54d2" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
TFT_eSPI tft;
TfteSpiDrawable tftDrawable(&tft, 2);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &tftDrawable);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoSafePowerdown = { "Safe Powerdown", 78, 0xffff, 0, SafePowerdown };
ActionMenuItem menuSafePowerdown(&minfoSafePowerdown, NULL);
const PROGMEM AnyMenuInfo minfoExitMenu = { "Exit", 50, 0xffff, 0, ExitMenuCallback };
ActionMenuItem menuExitMenu(&minfoExitMenu, &menuSafePowerdown);
const PROGMEM AnyMenuInfo minfoClearUsageCntrs = { "Clear", 80, 0xffff, 0, ClearUsageCntrs };
ActionMenuItem menuClearUsageCntrs(&minfoClearUsageCntrs, NULL);
const PROGMEM AnyMenuInfo minfoDisplayUsageCntrs = { "Display", 81, 0xffff, 0, DisplayUsageCntrs };
ActionMenuItem menuDisplayUsageCntrs(&minfoDisplayUsageCntrs, &menuClearUsageCntrs);
RENDERING_CALLBACK_NAME_INVOKE(fnUsageCountersRtCall, backSubItemRenderFn, "Usage Counters", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoUsageCounters = { "Usage Counters", 79, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackUsageCounters(fnUsageCountersRtCall, &menuDisplayUsageCntrs);
SubMenuItem menuUsageCounters(&minfoUsageCounters, &menuBackUsageCounters, &menuExitMenu);
RENDERING_CALLBACK_NAME_INVOKE(fnCoolingHysteresisRtCall, largeNumItemRenderFn, "Hysteresis", 56, CoolingHysteresisCallback)
EditableLargeNumberMenuItem menuCoolingHysteresis(fnCoolingHysteresisRtCall, 75, 4, 2, false, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnCoolingCalRtCall, largeNumItemRenderFn, "Cooling Cal", 48, CoolingCalCallback)
EditableLargeNumberMenuItem menuCoolingCal(fnCoolingCalRtCall, 74, 4, 2, true, &menuCoolingHysteresis);
RENDERING_CALLBACK_NAME_INVOKE(fnCoolingSettingsRtCall, backSubItemRenderFn, "Cooling Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoCoolingSettings = { "Cooling Settings", 66, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackCoolingSettings(fnCoolingSettingsRtCall, &menuCoolingCal);
SubMenuItem menuCoolingSettings(&minfoCoolingSettings, &menuBackCoolingSettings, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnTempHysteresisRtCall, largeNumItemRenderFn, "Hysteresis", 40, TempHysteresisCallback)
EditableLargeNumberMenuItem menuTempHysteresis(fnTempHysteresisRtCall, 73, 4, 2, false, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnTempCalRtCall, largeNumItemRenderFn, "Temp Cal", 32, TempCalCallback)
EditableLargeNumberMenuItem menuTempCal(fnTempCalRtCall, 72, 4, 2, true, &menuTempHysteresis);
RENDERING_CALLBACK_NAME_INVOKE(fnHeatingSettingsRtCall, backSubItemRenderFn, "Heating Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoHeatingSettings = { "Heating Settings", 42, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackHeatingSettings(fnHeatingSettingsRtCall, &menuTempCal);
SubMenuItem menuHeatingSettings(&minfoHeatingSettings, &menuBackHeatingSettings, &menuCoolingSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnHumdHysteresisRtCall, largeNumItemRenderFn, "Hysteresis", 24, HumdHysteresisCallback)
EditableLargeNumberMenuItem menuHumdHysteresis(fnHumdHysteresisRtCall, 71, 4, 2, false, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnHumidityCalRtCall, largeNumItemRenderFn, "Humidity Cal", 16, HumidityCalCallback)
EditableLargeNumberMenuItem menuHumidityCal(fnHumidityCalRtCall, 70, 4, 2, true, &menuHumdHysteresis);
const PROGMEM AnalogMenuInfo minfoMinRunTime = { "Min Run Time", 52, 10, 180, MinRunTimeCallback, 0, 1, " min" };
AnalogMenuItem menuMinRunTime(&minfoMinRunTime, 0, &menuHumidityCal);
RENDERING_CALLBACK_NAME_INVOKE(fnHumiditySettingsRtCall, backSubItemRenderFn, "Humidity Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoHumiditySettings = { "Humidity Settings", 15, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackHumiditySettings(fnHumiditySettingsRtCall, &menuMinRunTime);
SubMenuItem menuHumiditySettings(&minfoHumiditySettings, &menuBackHumiditySettings, &menuHeatingSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnThermostatSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoThermostatSettings = { "Settings", 8, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackThermostatSettings(fnThermostatSettingsRtCall, &menuHumiditySettings);
SubMenuItem menuThermostatSettings(&minfoThermostatSettings, &menuBackThermostatSettings, &menuUsageCounters);
const char enumStrFanEnum_0[] PROGMEM = "On";
const char enumStrFanEnum_1[] PROGMEM = "Auto";
const char* const enumStrFanEnum[] PROGMEM  = { enumStrFanEnum_0, enumStrFanEnum_1 };
const PROGMEM EnumMenuInfo minfoFanEnum = { "Fan", 49, 4, 1, FanCallback, enumStrFanEnum };
EnumMenuItem menuFanEnum(&minfoFanEnum, 0, &menuThermostatSettings);
const char enumStrModeEnum_0[] PROGMEM = "Off";
const char enumStrModeEnum_1[] PROGMEM = "Heat";
const char enumStrModeEnum_2[] PROGMEM = "Cool";
const char enumStrModeEnum_3[] PROGMEM = "Dehumidify";
const char* const enumStrModeEnum[] PROGMEM  = { enumStrModeEnum_0, enumStrModeEnum_1, enumStrModeEnum_2, enumStrModeEnum_3 };
const PROGMEM EnumMenuInfo minfoModeEnum = { "Mode", 39, 6, 3, ModeCallback, enumStrModeEnum };
EnumMenuItem menuModeEnum(&minfoModeEnum, 0, &menuFanEnum);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Code generated by plugins.
    tft.begin();
    tft.setRotation(3);
    renderer.setUpdatesPerSecond(10);
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForUpDownOk(&renderer, &menuModeEnum, 15, 13, 4);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_ALWAYS);
    renderer.setUseSliderForAnalog(false);
    installCoolBlueTraditionalTheme(renderer, MenuFontDef(nullptr, 2), MenuFontDef(nullptr, 1), true);
}

